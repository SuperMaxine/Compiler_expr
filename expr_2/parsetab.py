
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLORleftLANDleftEQUALSNEleftGTGELTLEleftPLUSMINUSleftTIMESDIVIDESBAND BREAK CHAR CHAR_CONST COMMA COMMENTS CONTINUE DIVIDES ELSE EQ EQUALS EXTERN FLOAT FLOAT_CONST GE GT ID IF INT INT_CONST INT_CONST_16 INT_CONST_8 LAND LBRACE LBRACKET LE LOR LPAREN LT MINUS NE NORMALSTRING PLUS RBRACE RBRACKET RETURN RPAREN SEMI STATIC TIMES VOID WHILE translation_unit : external_decl\n                             | translation_unit external_decl\n         external_decl : funcdef\n                          | declstmt\n         statement_list : statement\n                       | statement statement_list\n         statement : assignment_statement\n                  | declstmt\n                  | while_statement\n                  | funccall_stmt\n                  | jump_statement\n                  | selection_statement\n        typedecl : type cast_expr\n                    | type cast_expr EQUALS expressionarraydecl : type varsymbol LBRACKET INT_CONST RBRACKET EQUALS expressionarraydecl : type varsymbol LBRACKET INT_CONST RBRACKET funcdecl : storage type methodsymbol LPAREN param_list RPAREN funcdecl : type methodsymbol LPAREN param_list RPAREN pointer : TIMES\n                    | pointer TIMES storage : EXTERN\n                    | STATIC type : basetype pointer\n                 | basetype\n         declaration : typedecl\n                        | arraydecl\n                        | funcdecl declstmt : declaration SEMI\n         compound_statement : LBRACE statement_list RBRACEwhile_statement : WHILE LPAREN expression RPAREN compound_statementif_statement1 : IF LPAREN expression RPAREN compound_statement ELSE compound_statementif_statement2 : IF LPAREN expression RPAREN compound_statement selection_statement : if_statement1\n                                | if_statement2\n         break_statement  : BREAK SEMI  continue_statement  : CONTINUE SEMI  jump_statement  : return_statement\n                            | continue_statement\n                            | break_statement return_statement : RETURN expression SEMI  return_statement : RETURN SEMI assignment_statement : assignment_expr SEMIassignment_expr : cast_expr EQUALS expression expression : binary_expr\n                       | funccall_expr\n         cast_expr : unary_expr\n                      | primary_expr\n         primary_expr : varsymbol\n                         | constant\n         unary_op : BAND\n                     | TIMES\n         unary_expr : unary_op primary_expr  binary_expr : binary_expr PLUS binary_expr\n                  | binary_expr MINUS binary_expr\n                  | binary_expr TIMES binary_expr\n                  | binary_expr DIVIDES binary_expr\n                  | binary_expr GT binary_expr\n                  | binary_expr LT binary_expr\n                  | binary_expr LE binary_expr\n                  | binary_expr GE binary_expr\n                  | binary_expr EQ binary_expr\n                  | binary_expr NE binary_expr\n                  | binary_expr LAND binary_expr\n                  | binary_expr LOR binary_expr\n                  | LPAREN binary_expr RPAREN\n                  | cast_expr\n                  | funccall_expr\n         param : type varsymbol  param_list : param\n                       | param COMMA param_list\n                       | VOID\n         argument : varsymbol\n                     | constant\n         argument_list : argument\n                          | argument COMMA argument_list\n         funcdef : type methodsymbol LPAREN param_list RPAREN compound_statement\n                    | type methodsymbol LPAREN RPAREN compound_statement\n         funccall_expr : methodsymbol LPAREN argument_list RPAREN\n                     | methodsymbol LPAREN RPAREN\n         funccall_stmt : funccall_expr SEMI\n         basetype : INT\n                 | CHAR\n                 | FLOAT\n                 | VOID  methodsymbol : ID  varsymbol : ID  constant : INT_CONST constant : CHAR_CONST  constant : FLOAT_CONST  constant : NORMALSTRING '
    
_lr_action_items = {'INT':([0,1,2,3,4,15,16,17,18,33,37,58,61,62,63,81,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,145,150,151,154,],[11,11,-1,-3,-4,11,-21,-22,-2,-28,11,11,-77,11,11,-76,11,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,11,-30,-32,-31,]),'CHAR':([0,1,2,3,4,15,16,17,18,33,37,58,61,62,63,81,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,145,150,151,154,],[12,12,-1,-3,-4,12,-21,-22,-2,-28,12,12,-77,12,12,-76,12,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,12,-30,-32,-31,]),'FLOAT':([0,1,2,3,4,15,16,17,18,33,37,58,61,62,63,81,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,145,150,151,154,],[13,13,-1,-3,-4,13,-21,-22,-2,-28,13,13,-77,13,13,-76,13,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,13,-30,-32,-31,]),'VOID':([0,1,2,3,4,15,16,17,18,33,37,58,61,62,63,81,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,145,150,151,154,],[14,14,-1,-3,-4,14,-21,-22,-2,-28,50,50,-77,14,50,-76,14,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,50,-30,-32,-31,]),'EXTERN':([0,1,2,3,4,18,33,61,62,81,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,150,151,154,],[16,16,-1,-3,-4,-2,-28,-77,16,-76,16,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'STATIC':([0,1,2,3,4,18,33,61,62,81,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,150,151,154,],[17,17,-1,-3,-4,-2,-28,-77,17,-76,17,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'$end':([1,2,3,4,18,33,61,81,125,],[0,-1,-3,-4,-2,-28,-77,-76,-29,]),'ID':([5,7,11,12,13,14,26,28,29,33,34,35,36,38,43,46,50,55,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,84,85,86,87,88,89,93,94,95,96,97,99,103,123,125,127,128,129,130,132,133,134,135,139,143,150,151,154,],[23,-24,-81,-82,-83,-84,42,-50,-51,-28,-23,-19,45,23,-20,42,-84,23,23,23,23,23,23,23,23,23,23,23,23,23,23,42,23,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,23,137,23,-29,-42,23,-80,23,-41,-36,-35,23,42,-40,-30,-32,-31,]),'BAND':([5,7,11,12,13,14,33,34,35,38,43,55,62,64,65,66,67,68,69,70,71,72,73,74,75,83,84,85,86,87,88,89,93,94,95,96,97,99,103,123,125,127,128,129,130,132,133,134,135,143,150,151,154,],[28,-24,-81,-82,-83,-84,-28,-23,-19,28,-20,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,28,28,28,-29,-42,28,-80,28,-41,-36,-35,28,-40,-30,-32,-31,]),'TIMES':([5,7,11,12,13,14,22,23,24,25,27,30,31,32,33,34,35,38,40,41,42,43,50,51,53,54,55,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,84,85,86,87,88,89,93,94,95,96,97,99,103,105,106,107,108,109,110,111,112,113,114,115,116,117,119,123,125,127,128,129,130,132,133,134,135,138,143,150,151,154,],[29,35,-81,-82,-83,-84,-87,-86,-46,-47,-49,-88,-89,-90,-28,43,-19,29,-52,-48,-86,-20,-84,-66,66,-67,29,29,29,29,29,29,29,29,29,29,29,29,29,29,66,-67,29,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,29,29,66,66,-55,-56,66,66,66,66,66,66,66,66,-65,-79,29,-29,-42,29,-80,29,-41,-36,-35,29,-78,-40,-30,-32,-31,]),'INT_CONST':([5,7,11,12,13,14,26,28,29,33,34,35,38,39,43,55,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,84,85,86,87,88,89,93,94,95,96,97,99,103,123,125,127,128,129,130,132,133,134,135,139,143,150,151,154,],[22,-24,-81,-82,-83,-84,22,-50,-51,-28,-23,-19,22,57,-20,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,22,22,22,-29,-42,22,-80,22,-41,-36,-35,22,22,-40,-30,-32,-31,]),'CHAR_CONST':([5,7,11,12,13,14,26,28,29,33,34,35,38,43,55,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,84,85,86,87,88,89,93,94,95,96,97,99,103,123,125,127,128,129,130,132,133,134,135,139,143,150,151,154,],[30,-24,-81,-82,-83,-84,30,-50,-51,-28,-23,-19,30,-20,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,30,30,30,-29,-42,30,-80,30,-41,-36,-35,30,30,-40,-30,-32,-31,]),'FLOAT_CONST':([5,7,11,12,13,14,26,28,29,33,34,35,38,43,55,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,84,85,86,87,88,89,93,94,95,96,97,99,103,123,125,127,128,129,130,132,133,134,135,139,143,150,151,154,],[31,-24,-81,-82,-83,-84,31,-50,-51,-28,-23,-19,31,-20,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,31,31,31,-29,-42,31,-80,31,-41,-36,-35,31,31,-40,-30,-32,-31,]),'NORMALSTRING':([5,7,11,12,13,14,26,28,29,33,34,35,38,43,55,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,84,85,86,87,88,89,93,94,95,96,97,99,103,123,125,127,128,129,130,132,133,134,135,139,143,150,151,154,],[32,-24,-81,-82,-83,-84,32,-50,-51,-28,-23,-19,32,-20,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,32,32,32,-29,-42,32,-80,32,-41,-36,-35,32,32,-40,-30,-32,-31,]),'SEMI':([6,8,9,10,20,21,22,23,24,25,27,30,31,32,40,41,42,51,52,53,54,60,77,79,90,92,99,100,101,105,106,107,108,109,110,111,112,113,114,115,116,117,119,124,131,137,138,140,142,152,],[33,-25,-26,-27,-13,-48,-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,-14,-44,-45,-18,-67,-16,127,129,132,133,134,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-79,-17,143,-86,-78,-15,-43,-18,]),'LPAREN':([19,23,38,44,45,55,56,64,65,66,67,68,69,70,71,72,73,74,75,91,99,102,123,128,130,135,136,137,],[37,-85,55,58,-85,55,78,55,55,55,55,55,55,55,55,55,55,55,55,128,55,135,55,55,55,55,145,-85,]),'EQUALS':([20,21,22,23,24,25,27,30,31,32,40,41,42,79,98,137,],[38,-48,-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,123,130,-86,]),'LBRACKET':([21,23,137,],[39,-86,-86,]),'PLUS':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,64,-67,64,-67,-53,-54,-55,-56,64,64,64,64,64,64,64,64,-65,-79,-78,]),'MINUS':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,65,-67,65,-67,-53,-54,-55,-56,65,65,65,65,65,65,65,65,-65,-79,-78,]),'DIVIDES':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,67,-67,67,-67,67,67,-55,-56,67,67,67,67,67,67,67,67,-65,-79,-78,]),'GT':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,68,-67,68,-67,-53,-54,-55,-56,-57,-58,-59,-60,68,68,68,68,-65,-79,-78,]),'LT':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,69,-67,69,-67,-53,-54,-55,-56,-57,-58,-59,-60,69,69,69,69,-65,-79,-78,]),'LE':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,70,-67,70,-67,-53,-54,-55,-56,-57,-58,-59,-60,70,70,70,70,-65,-79,-78,]),'GE':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,71,-67,71,-67,-53,-54,-55,-56,-57,-58,-59,-60,71,71,71,71,-65,-79,-78,]),'EQ':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,72,-67,72,-67,-53,-54,-55,-56,-57,-58,-59,-60,72,-62,-63,-64,-65,-79,-78,]),'NE':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,73,-67,73,-67,-53,-54,-55,-56,-57,-58,-59,-60,73,-62,73,73,-65,-79,-78,]),'LAND':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,74,-67,74,-67,-53,-54,-55,-56,-57,-58,-59,-60,74,-62,-63,74,-65,-79,-78,]),'LOR':([22,23,24,25,27,30,31,32,40,41,42,51,53,54,76,77,105,106,107,108,109,110,111,112,113,114,115,116,117,119,138,],[-87,-86,-46,-47,-49,-88,-89,-90,-52,-48,-86,-66,75,-67,75,-67,-53,-54,-55,-56,-57,-58,-59,-60,75,-62,-63,-64,-65,-79,-78,]),'RPAREN':([22,23,24,25,27,30,31,32,37,40,41,42,47,49,50,51,53,54,59,76,77,78,80,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,138,141,144,146,149,],[-87,-86,-46,-47,-49,-88,-89,-90,48,-52,-48,-86,60,-69,-71,-66,-44,-45,-68,117,-67,119,124,-70,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,138,-79,-74,-72,-73,-78,147,148,-75,152,]),'COMMA':([22,30,31,32,42,49,59,120,121,122,],[-87,-88,-89,-90,-86,63,-68,139,-72,-73,]),'WHILE':([33,62,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,150,151,154,],[-28,91,91,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'RETURN':([33,62,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,150,151,154,],[-28,99,99,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'CONTINUE':([33,62,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,150,151,154,],[-28,100,100,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'BREAK':([33,62,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,150,151,154,],[-28,101,101,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'IF':([33,62,83,84,85,86,87,88,89,93,94,95,96,97,125,127,129,132,133,134,143,150,151,154,],[-28,102,102,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'RBRACE':([33,82,83,84,85,86,87,88,89,93,94,95,96,97,125,126,127,129,132,133,134,143,150,151,154,],[-28,125,-5,-7,-8,-9,-10,-11,-12,-37,-38,-39,-33,-34,-29,-6,-42,-80,-41,-36,-35,-40,-30,-32,-31,]),'LBRACE':([48,60,147,148,153,],[62,62,62,62,62,]),'RBRACKET':([57,],[79,]),'ELSE':([125,151,],[-29,153,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_decl':([0,1,],[2,18,]),'funcdef':([0,1,],[3,3,]),'declstmt':([0,1,62,83,],[4,4,85,85,]),'type':([0,1,15,37,58,62,63,83,145,],[5,5,36,46,46,103,46,103,46,]),'declaration':([0,1,62,83,],[6,6,6,6,]),'basetype':([0,1,15,37,58,62,63,83,145,],[7,7,7,7,7,7,7,7,7,]),'typedecl':([0,1,62,83,],[8,8,8,8,]),'arraydecl':([0,1,62,83,],[9,9,9,9,]),'funcdecl':([0,1,62,83,],[10,10,10,10,]),'storage':([0,1,62,83,],[15,15,15,15,]),'methodsymbol':([5,36,38,55,62,64,65,66,67,68,69,70,71,72,73,74,75,83,99,103,123,128,130,135,],[19,44,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,136,56,56,56,56,]),'cast_expr':([5,38,55,62,64,65,66,67,68,69,70,71,72,73,74,75,83,99,103,123,128,130,135,],[20,51,51,98,51,51,51,51,51,51,51,51,51,51,51,51,98,51,20,51,51,51,51,]),'varsymbol':([5,26,38,46,55,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,99,103,123,128,130,135,139,],[21,41,41,59,41,41,41,41,41,41,41,41,41,41,41,41,41,41,121,41,41,21,41,41,41,41,121,]),'unary_expr':([5,38,55,62,64,65,66,67,68,69,70,71,72,73,74,75,83,99,103,123,128,130,135,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'primary_expr':([5,26,38,55,62,64,65,66,67,68,69,70,71,72,73,74,75,83,99,103,123,128,130,135,],[25,40,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'unary_op':([5,38,55,62,64,65,66,67,68,69,70,71,72,73,74,75,83,99,103,123,128,130,135,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'constant':([5,26,38,55,62,64,65,66,67,68,69,70,71,72,73,74,75,78,83,99,103,123,128,130,135,139,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,122,27,27,27,27,27,27,27,122,]),'pointer':([7,],[34,]),'param_list':([37,58,63,145,],[47,80,104,149,]),'param':([37,58,63,145,],[49,49,49,49,]),'expression':([38,99,123,128,130,135,],[52,131,140,141,142,144,]),'binary_expr':([38,55,64,65,66,67,68,69,70,71,72,73,74,75,99,123,128,130,135,],[53,76,105,106,107,108,109,110,111,112,113,114,115,116,53,53,53,53,53,]),'funccall_expr':([38,55,62,64,65,66,67,68,69,70,71,72,73,74,75,83,99,123,128,130,135,],[54,77,92,77,77,77,77,77,77,77,77,77,77,77,77,92,54,54,54,54,54,]),'compound_statement':([48,60,147,148,153,],[61,81,150,151,154,]),'statement_list':([62,83,],[82,126,]),'statement':([62,83,],[83,83,]),'assignment_statement':([62,83,],[84,84,]),'while_statement':([62,83,],[86,86,]),'funccall_stmt':([62,83,],[87,87,]),'jump_statement':([62,83,],[88,88,]),'selection_statement':([62,83,],[89,89,]),'assignment_expr':([62,83,],[90,90,]),'return_statement':([62,83,],[93,93,]),'continue_statement':([62,83,],[94,94,]),'break_statement':([62,83,],[95,95,]),'if_statement1':([62,83,],[96,96,]),'if_statement2':([62,83,],[97,97,]),'argument_list':([78,139,],[118,146,]),'argument':([78,139,],[120,120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_decl','translation_unit',1,'p_translation_unit','lex1.py',194),
  ('translation_unit -> translation_unit external_decl','translation_unit',2,'p_translation_unit','lex1.py',195),
  ('external_decl -> funcdef','external_decl',1,'p_external_decl','lex1.py',206),
  ('external_decl -> declstmt','external_decl',1,'p_external_decl','lex1.py',207),
  ('statement_list -> statement','statement_list',1,'p_statement_list','lex1.py',212),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','lex1.py',213),
  ('statement -> assignment_statement','statement',1,'p_statement','lex1.py',221),
  ('statement -> declstmt','statement',1,'p_statement','lex1.py',222),
  ('statement -> while_statement','statement',1,'p_statement','lex1.py',223),
  ('statement -> funccall_stmt','statement',1,'p_statement','lex1.py',224),
  ('statement -> jump_statement','statement',1,'p_statement','lex1.py',225),
  ('statement -> selection_statement','statement',1,'p_statement','lex1.py',226),
  ('typedecl -> type cast_expr','typedecl',2,'p_typedecl','lex1.py',231),
  ('typedecl -> type cast_expr EQUALS expression','typedecl',4,'p_typedecl','lex1.py',232),
  ('arraydecl -> type varsymbol LBRACKET INT_CONST RBRACKET EQUALS expression','arraydecl',7,'p_arraydecl','lex1.py',239),
  ('arraydecl -> type varsymbol LBRACKET INT_CONST RBRACKET','arraydecl',5,'p_arraydecl_2','lex1.py',243),
  ('funcdecl -> storage type methodsymbol LPAREN param_list RPAREN','funcdecl',6,'p_funcdecl','lex1.py',247),
  ('funcdecl -> type methodsymbol LPAREN param_list RPAREN','funcdecl',5,'p_funcdecl_2','lex1.py',251),
  ('pointer -> TIMES','pointer',1,'p_pointer','lex1.py',260),
  ('pointer -> pointer TIMES','pointer',2,'p_pointer','lex1.py',261),
  ('storage -> EXTERN','storage',1,'p_storage','lex1.py',265),
  ('storage -> STATIC','storage',1,'p_storage','lex1.py',266),
  ('type -> basetype pointer','type',2,'p_type','lex1.py',269),
  ('type -> basetype','type',1,'p_type','lex1.py',270),
  ('declaration -> typedecl','declaration',1,'p_declaration','lex1.py',275),
  ('declaration -> arraydecl','declaration',1,'p_declaration','lex1.py',276),
  ('declaration -> funcdecl','declaration',1,'p_declaration','lex1.py',277),
  ('declstmt -> declaration SEMI','declstmt',2,'p_declstmt','lex1.py',281),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','lex1.py',287),
  ('while_statement -> WHILE LPAREN expression RPAREN compound_statement','while_statement',5,'p_while_statement','lex1.py',291),
  ('if_statement1 -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement','if_statement1',7,'p_if_statement1','lex1.py',295),
  ('if_statement2 -> IF LPAREN expression RPAREN compound_statement','if_statement2',5,'p_if_statement2','lex1.py',299),
  ('selection_statement -> if_statement1','selection_statement',1,'p_selection_statement','lex1.py',303),
  ('selection_statement -> if_statement2','selection_statement',1,'p_selection_statement','lex1.py',304),
  ('break_statement -> BREAK SEMI','break_statement',2,'p_break_statement','lex1.py',309),
  ('continue_statement -> CONTINUE SEMI','continue_statement',2,'p_continue_statement','lex1.py',313),
  ('jump_statement -> return_statement','jump_statement',1,'p_jump_statement','lex1.py',317),
  ('jump_statement -> continue_statement','jump_statement',1,'p_jump_statement','lex1.py',318),
  ('jump_statement -> break_statement','jump_statement',1,'p_jump_statement','lex1.py',319),
  ('return_statement -> RETURN expression SEMI','return_statement',3,'p_return_statement','lex1.py',323),
  ('return_statement -> RETURN SEMI','return_statement',2,'p_return_statement2','lex1.py',327),
  ('assignment_statement -> assignment_expr SEMI','assignment_statement',2,'p_assignment_statment','lex1.py',331),
  ('assignment_expr -> cast_expr EQUALS expression','assignment_expr',3,'p_assignment_expr','lex1.py',335),
  ('expression -> binary_expr','expression',1,'p_expression','lex1.py',339),
  ('expression -> funccall_expr','expression',1,'p_expression','lex1.py',340),
  ('cast_expr -> unary_expr','cast_expr',1,'p_cast_expr','lex1.py',345),
  ('cast_expr -> primary_expr','cast_expr',1,'p_cast_expr','lex1.py',346),
  ('primary_expr -> varsymbol','primary_expr',1,'p_primary_expr','lex1.py',351),
  ('primary_expr -> constant','primary_expr',1,'p_primary_expr','lex1.py',352),
  ('unary_op -> BAND','unary_op',1,'p_unary_op','lex1.py',359),
  ('unary_op -> TIMES','unary_op',1,'p_unary_op','lex1.py',360),
  ('unary_expr -> unary_op primary_expr','unary_expr',2,'p_unary_expr','lex1.py',365),
  ('binary_expr -> binary_expr PLUS binary_expr','binary_expr',3,'p_binary_expr','lex1.py',369),
  ('binary_expr -> binary_expr MINUS binary_expr','binary_expr',3,'p_binary_expr','lex1.py',370),
  ('binary_expr -> binary_expr TIMES binary_expr','binary_expr',3,'p_binary_expr','lex1.py',371),
  ('binary_expr -> binary_expr DIVIDES binary_expr','binary_expr',3,'p_binary_expr','lex1.py',372),
  ('binary_expr -> binary_expr GT binary_expr','binary_expr',3,'p_binary_expr','lex1.py',373),
  ('binary_expr -> binary_expr LT binary_expr','binary_expr',3,'p_binary_expr','lex1.py',374),
  ('binary_expr -> binary_expr LE binary_expr','binary_expr',3,'p_binary_expr','lex1.py',375),
  ('binary_expr -> binary_expr GE binary_expr','binary_expr',3,'p_binary_expr','lex1.py',376),
  ('binary_expr -> binary_expr EQ binary_expr','binary_expr',3,'p_binary_expr','lex1.py',377),
  ('binary_expr -> binary_expr NE binary_expr','binary_expr',3,'p_binary_expr','lex1.py',378),
  ('binary_expr -> binary_expr LAND binary_expr','binary_expr',3,'p_binary_expr','lex1.py',379),
  ('binary_expr -> binary_expr LOR binary_expr','binary_expr',3,'p_binary_expr','lex1.py',380),
  ('binary_expr -> LPAREN binary_expr RPAREN','binary_expr',3,'p_binary_expr','lex1.py',381),
  ('binary_expr -> cast_expr','binary_expr',1,'p_binary_expr','lex1.py',382),
  ('binary_expr -> funccall_expr','binary_expr',1,'p_binary_expr','lex1.py',383),
  ('param -> type varsymbol','param',2,'p_param','lex1.py',394),
  ('param_list -> param','param_list',1,'p_param_list','lex1.py',398),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','lex1.py',399),
  ('param_list -> VOID','param_list',1,'p_param_list','lex1.py',400),
  ('argument -> varsymbol','argument',1,'p_argument','lex1.py',411),
  ('argument -> constant','argument',1,'p_argument','lex1.py',412),
  ('argument_list -> argument','argument_list',1,'p_argument_list','lex1.py',417),
  ('argument_list -> argument COMMA argument_list','argument_list',3,'p_argument_list','lex1.py',418),
  ('funcdef -> type methodsymbol LPAREN param_list RPAREN compound_statement','funcdef',6,'p_funcdef','lex1.py',429),
  ('funcdef -> type methodsymbol LPAREN RPAREN compound_statement','funcdef',5,'p_funcdef','lex1.py',430),
  ('funccall_expr -> methodsymbol LPAREN argument_list RPAREN','funccall_expr',4,'p_funcall_expr','lex1.py',443),
  ('funccall_expr -> methodsymbol LPAREN RPAREN','funccall_expr',3,'p_funcall_expr','lex1.py',444),
  ('funccall_stmt -> funccall_expr SEMI','funccall_stmt',2,'p_funccall_stmt','lex1.py',457),
  ('basetype -> INT','basetype',1,'p_basetype','lex1.py',462),
  ('basetype -> CHAR','basetype',1,'p_basetype','lex1.py',463),
  ('basetype -> FLOAT','basetype',1,'p_basetype','lex1.py',464),
  ('basetype -> VOID','basetype',1,'p_basetype','lex1.py',465),
  ('methodsymbol -> ID','methodsymbol',1,'p_methodsymbol','lex1.py',469),
  ('varsymbol -> ID','varsymbol',1,'p_varsymbol','lex1.py',473),
  ('constant -> INT_CONST','constant',1,'p_constant1','lex1.py',477),
  ('constant -> CHAR_CONST','constant',1,'p_constant2','lex1.py',481),
  ('constant -> FLOAT_CONST','constant',1,'p_constant3','lex1.py',485),
  ('constant -> NORMALSTRING','constant',1,'p_constant4','lex1.py',489),
]
