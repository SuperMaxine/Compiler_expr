{
  "rawLex": "while (a3+15)>0xa do if x2 = 07 then while y<z do y = x * y / z; c=b*c+d;",
  "terminalSymbols": "; = { } > < + - * / ( ) IDN INT8 INT10 INT16 IF THEN ELSE WHILE DO",
  "rawGrammar": "P->L\nP->L P\nL->S ;\nS->IDN = E\nS->IF C THEN S\nS->IF C THEN S ELSE S\nS->WHILE C DO S\nS->{ P }\nC->E > E\nC->E < E\nC->E = E\nE->E + T\nE->E - T\nE->T\nT->F\nT->T * F\nT->T / F\nF->( E )\nF->IDN\nF->INT8\nF->INT10\nF->INT16",
  "GrammarFuntion": [
    {
      "str": "S'->P",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"S'\",place:para_arr[0][\"place\"], code:para_arr[0][\"code\"],children:para_arr}; }"
    },
    {
      "str": "P->L",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"P\", code:para_arr[0][\"code\"],children:para_arr}; }"
    },
    {
      "str": "P->L P",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"P\", code:para_arr[0][\"code\"]+para_arr[1][\"code\"],children:para_arr}; }"
    },
    {
      "str": "L->S ;",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"L\", code:para_arr[0][\"code\"],children:para_arr}; }"
    },
    {
      "str": "S->IDN = E",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"S\", code:para_arr[2][\"code\"]+para_arr[0][\"attribute\"]+\":=\"+para_arr[2][\"place\"]+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "S->IF C THEN S",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"S\", code:para_arr[1][\"code\"]+para_arr[1][\"true\"]+\":\\n\"+para_arr[3][\"code\"]+para_arr[1][\"false\"]+\":\\n\",children:para_arr}; }"
    },
    {
      "str": "S->IF C THEN S ELSE S",
      "FuncStr": "(para_arr,vm)=>{ let next = \"label\"+(++vm.labelNum); return {type:\"S\", code:para_arr[1][\"code\"]+para_arr[1][\"true\"]+\":\\n\"+para_arr[3][\"code\"]+\"goto \"+next+\"\\n\"+para_arr[1][\"false\"]+\":\\n\"+para_arr[5][\"code\"]+next+\":\\n\",children:para_arr}; }"
    },
    {
      "str": "S->WHILE C DO S",
      "FuncStr": "(para_arr,vm)=>{ let begin = \"label\"+(++vm.labelNum); return {type:\"S\", code:begin+\":\\n\"+para_arr[1][\"code\"]+para_arr[1][\"true\"]+\":\\n\"+para_arr[3][\"code\"]+\"goto \"+begin+\"\\n\"+para_arr[1][\"false\"]+\":\\n\",children:para_arr}; }"
    },
    {
      "str": "S->{ P }",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"S\", code:para_arr[1][\"code\"],children:para_arr}; }"
    },
    {
      "str": "C->E > E",
      "FuncStr": "(para_arr,vm)=>{ let t=\"label\"+(++vm.labelNum); let f=\"label\"+(++vm.labelNum); return {type:\"C\",true:t,false:f, code:para_arr[0][\"code\"]+para_arr[2][\"code\"]+\"if \"+para_arr[0][\"place\"]+\">\"+para_arr[2][\"place\"]+\" goto \"+t+\"\\n\"+\"goto \"+f+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "C->E < E",
      "FuncStr": "(para_arr,vm)=>{ let t=\"label\"+(++vm.labelNum); let f=\"label\"+(++vm.labelNum); return {type:\"C\",true:t,false:f, code:para_arr[0][\"code\"]+para_arr[2][\"code\"]+\"if \"+para_arr[0][\"place\"]+\"<\"+para_arr[2][\"place\"]+\" goto \"+t+\"\\n\"+\"goto \"+f+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "C->E = E",
      "FuncStr": "(para_arr,vm)=>{ let t=\"label\"+(++vm.labelNum); let f=\"label\"+(++vm.labelNum); return {type:\"C\",true:t,false:f, code:para_arr[0][\"code\"]+para_arr[2][\"code\"]+\"if \"+para_arr[0][\"place\"]+\"=\"+para_arr[2][\"place\"]+\" goto \"+t+\"\\n\"+\"goto \"+f+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "E->E + T",
      "FuncStr": "(para_arr,vm)=>{ vm.placeNum++; let newtemp=\"tmp\"+vm.placeNum; return {type:\"E\",place:newtemp, code:para_arr[0][\"code\"]+para_arr[2][\"code\"]+newtemp+\":=\"+para_arr[0][\"place\"]+\"+\"+para_arr[2][\"place\"]+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "E->E - T",
      "FuncStr": "(para_arr,vm)=>{ vm.placeNum++; let newtemp=\"tmp\"+vm.placeNum; return {type:\"E\",place:newtemp, code:para_arr[0][\"code\"]+para_arr[2][\"code\"]+newtemp+\":=\"+para_arr[0][\"place\"]+\"-\"+para_arr[2][\"place\"]+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "E->T",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"E\",place:para_arr[0][\"place\"], code:para_arr[0][\"code\"],children:para_arr}; }"
    },
    {
      "str": "T->F",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"T\",place:para_arr[0][\"place\"], code:para_arr[0][\"code\"],children:para_arr}; }"
    },
    {
      "str": "T->T * F",
      "FuncStr": "(para_arr,vm)=>{ vm.placeNum++; let newtemp=\"tmp\"+vm.placeNum; return {type:\"T\",place:newtemp, code:para_arr[0][\"code\"]+para_arr[2][\"code\"]+newtemp+\":=\"+para_arr[0][\"place\"]+\"*\"+para_arr[2][\"place\"]+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "T->T / F",
      "FuncStr": "(para_arr,vm)=>{ vm.placeNum++; let newtemp=\"tmp\"+vm.placeNum; return {type:\"T\",place:newtemp, code:para_arr[0][\"code\"]+para_arr[2][\"code\"]+newtemp+\":=\"+para_arr[0][\"place\"]+\"/\"+para_arr[2][\"place\"]+\"\\n\",children:para_arr}; }"
    },
    {
      "str": "F->( E )",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"F\",place:para_arr[1][\"place\"], code:para_arr[1][\"code\"],children:para_arr}; }"
    },
    {
      "str": "F->IDN",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"F\",place:para_arr[0][\"attribute\"], code:\"\",children:para_arr}; }"
    },
    {
      "str": "F->INT8",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"F\",place:para_arr[0][\"attribute\"], code:\"\",children:para_arr}; }"
    },
    {
      "str": "F->INT10",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"F\",place:para_arr[0][\"attribute\"], code:\"\",children:para_arr}; }"
    },
    {
      "str": "F->INT16",
      "FuncStr": "(para_arr,vm)=>{ return {type:\"F\",place:para_arr[0][\"attribute\"], code:\"\",children:para_arr}; }"
    }
  ]
}